/*
 * $Id$
 */

Coding Standards
================

This coding standards are based on those of the Harbour project.


Code Implementation
-------------------

[1] Functions that are given pointers to resources should not free them.
    For instance, function int mail(char *to, char *from) should NOT free
    to and/or from. Exceptions:
    - The function's designated behavior is freeing that resource.
      E.g. hb_xfree()
    - The function is given a boolean argument, that controls whether or not
      the function may free its arguments (if true - the function must free its
      arguments, if false - it must not)

[2] Functions that are tightly integrated with other functions within the
    same module, and rely on each other non-trivial behavior, should be
    documented as such and declared 'static'.  They should be avoided if
    possible.

[3] Use definitions and macros whenever possible, so that constants have
    meaningful names and can be easily manipulated.

[4] When writing functions that deal with strings, be sure to remember
    that (x)Harbour holds the length property of each string, and that it
    shouldn't be calculated with strlen().  Write your functions in a such
    a way so that they'll take advantage of the length property, both
    for efficiency and in order for them to be binary-safe.
    Functions that change strings and obtain their new lengths while
    doing so, should return that new length, so it doesn't have to be
    recalculated with strlen()

[5] NEVER USE strncat().  If you're absolutely sure you know what you're doing,
    check its man page again, and only then, consider using it, and even then,
    try avoiding it.

[6] Use assert(). Not only does good assertion catch bugs, but it also
    helps with code readability.
     - Do not use assert for error handling. Use assert only for the
       condition that must be always true.
     - Do not use assignments in assert conditions.  If you assign inside an
       assert condition, you risk an elusive bug that would be very difficult
       to spot in a debug build, due to the side effect of the assignment.
       Function calls in assert conditions may also cause this problem, if
       they modify one of their arguments or global variables.

[7] When commenting out code using a #if statement, do NOT use 0 only. Instead
    use "<svn username here>_0". For example, #if FOO_0, where FOO is your
    svn user foo.  This allows easier tracking of why code was commented out,
    especially in bundled libraries.

[8] Use hb_xgrab()/hb_xalloc(), hb_xfree(), hb_xrealloc(), hb_xsize() to
    manage memory allocations. These functions implement an internal
    "safety-net" mechanism that ensures the deallocation of any unfreed
    memory at the end of an application.  They also provide useful
    allocation and overflow information while running in debug mode.


Naming Conventions
------------------

[1] Function names for user-level functions defined in C code should be
    enclosed within the HB_FUNC() macro. They should be in uppercase.
    Abbreviations should not be used when they greatly decrease the
    readability of the function name itself.

[2] Variable names must be meaningful. One letter variable names must be
    avoided, except for places where the variable has no real meaning or
    a trivial meaning (e.g. for (i=0; i<100; i++) ...).

[3] Variable names should use so-called Hungarian notation. Use lowercase
    letters instead of underscores to separate between words.

    Good:
    pMemoryPtr

    Bad:
    p_memory_ptr

[4] At C level, static variables should be prefixed with 's_' and global
    ones (variables shared beetwen modules) with 'g_'.

[5] At (x)Harbour level, static variables should be prefixed with 'STA_',
    public (global) with "PUB_" and private with "PRI_".



Syntax and indentation
----------------------

[1] Never use C++ style comments when writing C code (i.e. // comment).
    Always use C style comments instead (/* */).  (x)Harbour is written in
    C, and is aimed at compiling under any ANSI-C compliant compiler.
    Even though many compilers accept C++ style comments in C code, you have
    to ensure that your code would compile with other compilers as well.

[2] Use Allman style and be generous with whitespace and braces.
    Always prefer:

       if( foo )
       {
          bar;
       }

    to:

       if(foo)bar;

    and to:

       if( foo ){
          bar;
       }

    Keep one empty line between the variable declaration section and
    the statements in a block, as well as between logical statement
    groups in a block.  Maintain at least one empty line between
    two functions.

[3] When indenting, use three spaces. It is important to maintain
    consistency in indenture so that definitions, comments, and
    control structures line up correctly.
    
[4] Never use real tabs


Documentation
--------------

[1] Document your code using embebed comments.
    In the following cases, a special syntax must be used:
    - When something should be added:
         /* TODO: comment */
    - When something needs to be fixed:
         /* TOFIX: comment */
    - When something could be removed:
         /* OBSOLETE: comment */
    - When something should be investigated:
         /* QUESTION: comment */
    - When something is commented out to improve performance:
         /* OPT: comment */

[2] Whenever possible, document yourself functions you developed.
    Usually it's hard to understand code written by other person, moreover
    when it involves some obscure algorithm, system's vars or attributes
    or data unavailable for the documentator.
    This is particularly evident for low level functions.

[3] After some time after functions were written, work becomes more
    difficult because even the developer needs to read the code several
    times.  This is evident when variables don't have useful names.
    Because of that, DO NOT leave functions without documentation.

[4] If a function mades calls to other non-documented functions, and the
    original developer are not available anymore, could be so hard and even
    impossible to document it.

[5] If you are the developer of the function don't worry by your narrative
    skills, concentrate in what functions do, which arguments it gets,
    which are its purpose and specially what information function returns.

[6] If you are the developer of the function, and you are using system's
    functions or vars undocumented, please explain them as much as possible.
    If you use a obscure or strange algorithm please explain what it does
    and how it works.


File structure
--------------

[1] All files must have at the very top de SVN ID.  See ./doc/howtosvn.txt

[2] All source ( *.prg, *.ch, *.rc ) files must have, inmediatly after the
    SVN ID, the following licence information:
    
/*
 *    QPM - QAC Based Project Manager
 *
 *    Copyright 2011 Fernando Yurisich <fernando.yurisich@gmail.com>
 *    http://qpm.sourceforge.net
 *
 *    Based on QAC - Project Manager for (x)Harbour
 *    Copyright 2006-2011 Carozo de Quilmes <CarozoDeQuilmes@gmail.com>
 *    http://www.CarozoDeQuilmes.com.ar
 *
 *    This program is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

[3] All files must end with a newline char preceded by the following line:

/* eof */
